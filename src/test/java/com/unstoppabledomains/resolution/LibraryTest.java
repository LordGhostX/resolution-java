package com.unstoppabledomains.resolution;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.unstoppabledomains.TestUtils;
import com.unstoppabledomains.exceptions.NSExceptionCode;
import com.unstoppabledomains.exceptions.NamingServiceException;

import org.junit.jupiter.api.BeforeEach;

public class LibraryTest {
    Resolution resolution;

    @BeforeEach
    public void initEach() {
        resolution = new Resolution("https://mainnet.infura.io/v3/781c1e5cae32417b93eac26042950d25");
    }

    @Test
    public void namehash() throws NamingServiceException {
        String hash = resolution.namehash("crypto");
        assertEquals("0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f", hash);
    }

    @Test
    public void namehash2() throws NamingServiceException {
        String hash = resolution.namehash("brad.crypto");
        assertEquals("0x756e4e998dbffd803c21d23b06cd855cdc7a4b57706c95964a37e24b47c10fc9", hash);
    }

    @Test
    public void wrongDomainNamehash() {
        TestUtils.checkError(() -> resolution.namehash("unupported"), NSExceptionCode.UnsupportedDomain);
    }

    @Test
    public void addr() throws NamingServiceException{
        String addr = resolution.addr("homecakes.crypto", "eth");
        assertEquals("0xe7474D07fD2FA286e7e0aa23cd107F8379085037", addr);
    }

    @Test
    public void wrongDomainAddr() {
        TestUtils.checkError(() -> resolution.addr("unregistered.crypto", "eth"), NSExceptionCode.UnregisteredDomain);
    }

    @Test
    public void UnknownCurrency() {
        TestUtils.checkError(() -> resolution.addr("brad.crypto", "unknown"), NSExceptionCode.UnknownCurrency);
    }

    @Test
    public void notConfiguredCurrency() {
        TestUtils.checkError(() -> resolution.addr("brad.crypto", "dodge"), NSExceptionCode.UnknownCurrency);
    }

    @Test
    public void ipfsHash() throws NamingServiceException {
        String ipfs = resolution.ipfsHash("brad.crypto");
        assertEquals( "QmRsDVRwtdhhgznt3VZerdqcJwdQCQv9axZcy3F5hXh5P5", ipfs);
    }

    @Test
    public void ownerTest() throws NamingServiceException{
        String owner = resolution.owner("brad.crypto");
        assertEquals("0x8aad44321a86b170879d7a244c1e8d360c99dda8", owner);
    }

    @Test
    public void ownerFailTest() {
        TestUtils.checkError(() -> resolution.owner("unregistered.crypto"), NSExceptionCode.UnregisteredDomain);
    }

    @Test
    public void noIpfsHash() {
        TestUtils.checkError(() -> resolution.ipfsHash("unregstered.crypto"), NSExceptionCode.UnspecifiedResolver);
    }

    @Test
    public void noEmailRecord() {
        TestUtils.checkError(() -> resolution.email("brad.crypto"), NSExceptionCode.RecordNotFound);
    }

}
